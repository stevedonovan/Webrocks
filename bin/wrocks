#!/usr/bin/env lua
--[[

 #A simple local Web interface to LuaRocks#

 Each rocks repository has already got an 'index.html' presenting the available
 rocks in a nice format. So the strategy is to grab this file, process it, and
 serve it up with a little webserver. This requires LuaSocket, so the first thing this
 script does is check whether LuaSocket is already installed, and attempts to
 install it otherwise.

 We first get a list of installed rocks using 'luarocks list', and then massage the index:

  - all local rock/spec references must be made absolute, using the server URL
  - the rock names are made into clickable links
  - the style of the side table is made either 'version' or 'installed', depending
	on whether the rock is currently installed
  - a new style called 'installed' is inserted, with a blue background.

  The clickable rock names are given a href="ROCKNAME", and the webserver sees any
  requests that don't have an extension to mean 'install this ROCKNAME', otherwise it
  returns the text of the requested file in the usual manner.

  We attempt to install the rock by capturing the output of 'luarocks install ROCKNAME'.
  This output is saved as ROCKNAME.log.txt. If the output contains 'Error:', we return
  the contents of the log file as the server response, otherwise we return a small
  document which redirects us back to the index, after re-processing the index. In
  this way, the installed status of the rocks is updated and presented appropriately.

  Limitations:
    - assumes that the luarocks script is on the path
    - only works with http repositories
    - currently only works with the first rock repository; not possible to span several

  Steve Donovan and Ignacio Burgueno, 2009-2010, MIT/X11

  Uses:
  Web server v0.1
  Copyright (c) 2008 Samuel Saint-Pettersen

--]]

if arg[1] == '--help' then
    print [[
LuaRocks Web Interface, Version 2.0
    (don't run with sudo - browsers don't like this!)
    --nolaunch  don't start browser automatically
    --addr=IP address (default localhost)
    --port= HTTP port (default 8080)
    --local  work with the local tree only
    --from=another rocks repo
    --only-from=another rocks repo; only search this for rocks!
    --refresh reload the index from the rocks repo
    --browser=specific browser
    --luarocks=path to another instance of luarocks script
    --nocheck don't attempt to classify packages as local or global
]]
    return
end


local append = table.insert

local cfg = require 'luarocks.cfg'
local fs = require 'luarocks.fs'
local req = require 'luarocks.require'
local dir = require 'luarocks.dir'
local util = require 'luarocks.util'

local args,flags
flags,args = util.parse_flags(...)
local addr = flags['addr'] or 'localhost'
local port = flags['port'] or '8080'
local rocks_server = flags['from'] or flags['only-from']
local URL = 'http://'..addr..':'..port
local from_flags = (flags['from'] and 'from') or (flags['only-from'] and 'only-from')
from_flags = from_flags and (' --'..from_flags..'='..rocks_server) or ''
local browser = flags['browser']
local run_local = flags['local']
local check_version = not flags['nocheck']

local DIRSEP = package.config:sub(1,1)
local Windows = DIRSEP == '\\'
-- we want the local per-user configuration directory
local rocks_command =  flags['luarocks'] or 'luarocks '
local root = dir.path(cfg.home,'.luarocks')
--- always use ~/.luarocks - create if necessary.
if not fs.exists(root) then
    fs.make_dir(root)
end
root = root..DIRSEP
if not run_local then
    rocks_command = 'sudo '..rocks_command
else
    from_flags = from_flags .. ' --local '
end

-- we need LuaSocket to get the ball rolling here
local stat,socket = pcall(require,'socket')
if not stat then -- we need to grab luaSocket!
    if os.execute (rocks_command ..'install luasocket') == 0 then
        -- restart this script
        os.execute (arg[-1]..' '..arg[0])
    end
    return
end

-- capture where we are in order to load the resource files
-- assumes that this script sits in $PATH/bin; we want $PATH
local install_directory = debug.getinfo(1, "S").source
install_directory = install_directory:match("@(.+)[\\/].+[\\/]") --  ?
install_directory = install_directory:gsub("[\\/]", DIRSEP)

local function readfile (f)
	local f,err = io.open(f, 'rb')
	if not f then return nil,err end
	local s = f:read '*a'
	f:close()
	return s
end

local function writefile (f,s)
    local f,err = io.open(f,'wb')
	if not f then return nil,err end
	f:write(s)
	f:close()
	return #s
end


local installed_style = [[
td.installed {
   background-color: #d0f0d0;
   vertical-align: top;
   text-align: left;
   padding: 5px;
   width: 100px;
}

a.install {
   border: none;
}

a.remove {
   border: none;
}

.working {
   border: none;
   margin-right: 5px;
}
]]

-- This jQuery script makes our 'install' actions into Ajax requests. It installs a
-- little animated icon next to the install link. On the response, it first removes
-- the icon and if successful changes the colour of the right-hand box by setting
-- the 'installed' class.  Otherwise pops up the error dialog.

-- $(document).ready(function() {

local installed_script = [[
<link href="/jqModal.css" rel="stylesheet" type="text/css" />
<link rel="icon" href="/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
<script type="text/javascript" src="/jqModal.js"></script>

<script type="text/javascript">
$(window).load(function() {
	$(document.body).append("<div id='modalDialog' class='jqmWindow'><a href='#' class='jqmClose'>Close</a><hr><div id='modalDialogInsertion'></div></div>");
	$("#modalDialog").jqm();
	$("a.install").click(function(el) {
		$(this).prepend("<img src='/ajax-loader.gif' class='working'></img>");
		$.ajax({
			url: this.href,
			data: "",
			success: function(response) {
				// find the sibling <td>
				$("td:has(.working) + td").addClass("installed");
				$(".working").remove();
				window.location = response;
			},
			error: function(xhr, textStatus, errorThrown) {
				$(".working").remove();
				$("#modalDialogInsertion").html(xhr.responseText);
				$("#modalDialog").jqmShow();
			}
		});
		return false;
	});
	$("a.remove").click(function(el) {
		$(this).prepend("<img src='/ajax-loader.gif' class='working'></img>");
		$.ajax({
			url: this.href,
			data: "",
			success: function() {
				// find the sibling <td>
				$("td:has(.working) + td").removeClass("installed").addClass("version");
				$(".working").remove();
				window.location.reload(true);
			},
			error: function(xhr, textStatus, errorThrown) {
				$(".working").remove();
				$("#modalDialogInsertion").html(xhr.responseText);
				$("#modalDialog").jqmShow();
			}
		});
		return false;
	});
});
</script>
]]

local function href (title,url,class)
    return '<a href="'..url..'" class="' .. (class or "") .. '">'..title..'</a>'
end

local index_name

local function get_index (force)
    if not rocks_server then
        rocks_server = cfg.rocks_servers[1]
    else
        not_default_server = true
    end
    if not index_name then
        index_name = rocks_server:gsub('%W','_')..'_rocks_index.html'
    end
	local doc_index = root..index_name
    -- luasocket download has slightly different sematics;
    -- may _not_ pass it an absolute path
	if not fs.exists (doc_index) or force then
        fs.change_dir(root)
		if not fs.download(rocks_server..'/index.html',index_name) then
            print (' ***** downloading index from '..rocks_server..' failed ****')
            os.exit(1)
        end
        fs.pop_dir()
	end
	local index = readfile (doc_index)
	-- ensure that the relative links to rockspecs and rocks are absolute!
	index = index:gsub('href="([^"]+)"',function(ref)
		if not ref:find '^http://' then
			ref = rocks_server..'/'..ref
		end
		return 'href="'..ref..'"'
	end)

	-- patch the first line to give us a refresh option...
    local dest = run_local and ' locally' or ' globally'
	index,cnt = index:gsub('Lua modules available from this location',
		'Lua modules avaliable from '..rocks_server..' '..href('(refresh)','_refresh')..' installed'..dest,
		1)
    -- and insert our jQuery scripts
	index = index:gsub("</head>", installed_script .. "</head>")

	return index
end

local function process_index (contents,installed)
	local modules,module_set = {},{}
	local k = 1
	local font = '<font size="%-1">'

	-- add the 'installed' style
	contents = contents:gsub('</style>', installed_style .. "</style>")

	-- make the rock names clickable
	contents = contents:gsub('<a name="([%w_%-]+)"></a><b>[%w_%-]+</b>',
		function(name)
			append(modules,name)
			module_set[name] = true
			return ('<a name="%s" href="%s"><b>%s</b></a>'):format(name,name,name)
		end
	)

	-- note the URL convention for removing a rock - trailing '_'
	contents = contents:gsub('<font size="%-1">',function()
		local name = modules[k]
		k = k + 1
		return '<font size="-1">'..href('install',name, 'install')..' | '..href('remove',name..'_', 'remove')..' | '
	end)

	-- change the style for installed rocks
	k = 1
	contents = contents:gsub('class="version"',function()
	  local name = modules[k]
	  k = k + 1
	  local check = installed[name]
	  return 'class='..(check and '"installed"' or '"version"')
	end)
	return contents,modules,module_set
end

local ERROR_PAGESIZE = 15

local function htmlify (file,lcount)
	local out = {}
	append(out,'<h1>Lua Rocks Error</h1><p>')
    if lcount then -- we have been given a file with its size in lines
        -- the issue here is that it is easy to overfill the error box, so we 'tail' the log file
        local k,kstart = 1,0
        if lcount > ERROR_PAGESIZE then kstart = lcount - ERROR_PAGESIZE end
        for line in io.lines(file) do
            if k > kstart then
                line = line .. '<br>'
                append(out,line)
            end
            k = k + 1
        end
    else
        append(out,file) -- just some string
    end
	append(out,'</p>')
	return table.concat(out,'\n')
end

-- this parses the output of luarocks list, being careful to note whether we
-- are working locally or globally.
local function get_installed_rocks ()
	local installed = {}
    local package
    -- assuming a canonical situation here where there is the local and the system
    -- or 'global' tree (certainly not true for LfW!)
    -- Still have to handle the case where there are more trees (wd interact with --to flag)
    local trees = cfg.rocks_trees
    local ltree,gtree = trees[1],trees[2]
    check_version = check_version and type(ltree)=='string' and type(gtree)=='string'
    local cmd = rocks_command .. from_flags .. ' list'
    print('installed rocks: '..cmd)
	local f = io.popen(cmd)
    local line = f:read()
	while line do
		if line:find('^%S+$') and not line:find('^%-%-') then
            package = line
            if not check_version then
                installed[package] = true
            else
                while true do
                    line = f:read()
                    if line:match '^%s*$' then break end
                    local  vs, repo = line:match '%s+(%S+) %S+%s+%-%s+(%S+)'
                    if run_local then
                        if repo:match (ltree) then
                            installed[package] = vs
                            print('local',package,vs)
                            break
                        end
                    else
                        if repo:match (gtree) then
                            installed[package] = vs
                            print('root',package,vs)
                            break
                        end
                    end
                end
            end
		end
        line = f:read()
	end
	f:close()
	return installed
end

local installed,contents,index_contents,modules,module_set

local function refresh_contents ()
	installed = get_installed_rocks()
	contents,modules,module_set = process_index(index_contents,installed)
	writefile(root..'index.html',contents)
end

local function force_refresh (mod)
	-- update index and force the browser to refresh, going back to the module.
	refresh_contents()
	if mod then mod = '#'..mod else mod = '' end
	return ([[
<html><head>
<meta http-equiv="Refresh" content="0;url=%s/index.html%s">
</head>
<body></body>
</html>]]):format(URL,mod)
end

local function ajax_refresh (mod)
	-- update index and force the browser to refresh, going back to the module.
	refresh_contents()
	if mod then mod = '#'..mod else mod = '' end
	--return (URL.."MODULE"):gsub('MODULE',mod), "text/plain"
    return URL..mod, 'text/plain'
end

local function run_rocks_command (cmd,mod)
    if cmd == 'remove' and installed[mod] then
        return 500,htmlify 'This package is not installed'
    end
    local lr_flags = from_flags
    if run_local then lr_flags = lr_flags..' '..'--local' end
    local cmdline = rocks_command ..cmd..from_flags..' '..mod
    print('Running command:',cmdline)
	local f = io.popen(cmdline..' 2>&1')
	local logfile = root..mod..'-'..cmd..'-log.txt'
	local log = io.open(logfile,'w')
    print('logfile',logfile,log)
    local lcount = 1
	for line in f:lines() do
		print(line)
		log:write(line,'\n')
		if line:find '^Error:' then
			f:close()
			log:close()
			return 500, htmlify(logfile,lcount)
		end
        lcount = lcount + 1
	end
	f:close()
	log:close()
	return 200, ajax_refresh(mod)
end

local function process_url (file)
	if file == '_quit' then
		os.exit(0)
	elseif file == '_refresh' then
		get_index(true)
		return 200, force_refresh()
	elseif module_set[file] then -- user wants to install a rock
		return run_rocks_command('install',file)
	else
		file = file:gsub('_$','')
		if module_set[file] then --user wants to remove a rock (name postfixed with '_')
			return run_rocks_command('remove',file)
		else
			return 500, nil,"unrecognized request: '"..file.."'"
		end
	end
end

---- launch the browser ----


local browsers = {
     "gnome-open","xdg-open","x-www-browser",
     "firefox", "opera", "konqueror", "epiphany", "mozilla", "netscape"
}

function launch_browser (url)
    local exec = os.execute
    if browser then
        if exec(browser..' '..url..'&') ~= 0 then
            print ("bad browser: "..browser)
            print ('Please point your browser to '..URL)
            return
        end
    end
    if Windows then
        exec('rundll32 url.dll,FileProtocolHandler '..url)
    else
        for _,p in ipairs(browsers) do
            if exec(p..' '..url..'&') == 0 then return end
        end
        -- OK, this should work if we're OS X...
		if exec('/Applications/Safari.app/Contents/macOS/Safari') ~= 0 then
			print 'could not automatically load browser.'
			print ('Please point your browser to '..URL)
		end
    end
end

--------- Let the Program Begin! -------------


index_contents = get_index(flags['refresh'])
refresh_contents()

if not flags['nolaunch'] then
	launch_browser(URL)
end

----  A little web server, based on code by Samuel Saint-Pettersen ----

-- print message to show web server is running
print("LuaRocks Web Interface, version 2.0")
print("Running...(log files are at "..root..")")

local client

local function send_error (code, message)
	local header = "HTTP/1.1 " .. code .. "\r\nContent-Type:text/html\r\n"
	local msg = ([[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>%s</title>
</head><body>
<h1>%s</h1>
<p>%s</p>
<hr/>
<small>Lua web server v0.1</small>
</body></html>]]):format(code, code, message or code)

	header = header .. "Content-Length:" .. #msg .. "\r\n\r\n"
	client:send(header)
	client:send(msg)
end

local function send_headers (code, type, length)
	client:send( ("HTTP/1.1 %s\r\nContent-Type: %s\r\nContent-Length: %d\r\nConnection: close\r\n\r\n"):format(code, type, length) )
end

local filepat = '[%a%d_%-]+'
local idpat = '/('..filepat..')'
local docpat = '/('..filepat..'%.%l+)'

-- create TCP socket on addr:port
local server = assert(socket.bind(addr, tonumber(port)))
-- loop while waiting for a user agent request
while 1 do
	-- wait for a connection
	client = server:accept()
	-- set timeout - 1 minute
	client:settimeout(60)
	-- receive request from user agent
	local request, err = client:receive()
	-- if there's no error, return the requested page
	if not err then
		-- resolve requested file from user agent request
		local file,action
		if request:find ' / ' then
			file = 'index.html'
		else
			file = request:match(docpat)
			if not file then
				file = request:match(idpat)
				action = file
			end
		end
		-- if we're not requesting a file with extension, then it's a custom action
		if action then
			local status, body, err = process_url(action)
			if body then
				-- err will hold optional content type
				send_headers(status, err or "text/html", #body)
				client:send(body)
			else
				send_error(status, err)
			end
		else
			-- display requested file in browser; first look in root
			local content = readfile( root..file )
			if content ~= nil then
				send_headers("200 OK", "text/html", #content)
				client:send(content)
			else -- and then in the resources directory
                local resource_file = install_directory .. DIRSEP .. "resources" .. DIRSEP .. file
				content = readfile(resource_file)
				if content then
					if file:match("%.gif$") then
						send_headers("200 OK", "image/gif", #content)
					elseif file:match("%.js$") then
						send_headers("200 OK", "text/javascript", #content)
					elseif file:match("%.css$") then
						send_headers("200 OK", "text/css", #content)
					elseif file:match("%.ico$") then
						send_headers("200 OK", "image/x-icon", #content)
					elseif file:match("%.png$") then
						send_headers("200 OK", "image/png", #content)
					else
						send_headers("200 OK", "text/html", #content)
					end
					client:send(content)
				else
					-- display 404 message and server information
					send_error('404 Not Found')
				end
			end
		end
	end
	-- done with client, close request
	client:close()
end


